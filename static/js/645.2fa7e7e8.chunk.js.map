{"version":3,"file":"static/js/645.2fa7e7e8.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/MoviesGallery/MoviesGalleryList/MoviesGalleryList.styled.jsx","components/MoviesGallery/MovieGalleryItem/MovieGalleryItem.styled.jsx","components/MoviesGallery/MovieGalleryItem/MovieGalleryItem.jsx","components/MoviesGallery/MoviesGalleryList/MoviesGalleryList.jsx","pages/Home/Home.styled.jsx","services/MoviesApi.jsx","services/Notify.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 30px 0;\n`;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { LoaderWrapper } from 'components/Loader/Loader.styled';\n\nexport default function Loader() {\n  return (\n    <LoaderWrapper>\n      <ThreeDots\n        height=\"80\"\n        width=\"80\"\n        radius=\"9\"\n        color=\"#fd5103\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n    </LoaderWrapper>\n  );\n}\n","import styled from 'styled-components';\n\nexport const MoviesGalleryContainer = styled.ul`\n  display: grid;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1440px;\n\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n  grid-gap: 30px;\n  margin-top: 0;\n  margin-bottom: 0;\n\n  list-style: none;\n`;\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const MovieGalleryCard = styled.li`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n\n  border: 1px solid #e3e3e3;\n  border-radius: 8px;\n  overflow: hidden;\n  width: 100%;\n  outline: none;\n\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    border 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    transform: scale(1.03);\n    border: 1px solid rgb(253, 81, 3);\n    box-shadow: rgb(253, 81, 3) 0px 0px 5px 2px;\n  }\n`;\nexport const LinkWrapper = styled(NavLink)`\n  text-decoration: none;\n  color: #fcfcfc;\n`;\n\nexport const MoviePoster = styled.img`\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n`;\n\nexport const Description = styled.div`\n  position: relative;\n  padding: 0 24px;\n  min-height: 135px;\n`;\n\nexport const MovieTitle = styled.h2`\n  margin-top: 24px;\n  min-height: 60px;\n\n  font-size: 24px;\n  font-weight: 500;\n`;\n\nexport const MovieDateRelease = styled.p`\n  position: absolute;\n  bottom: 0;\n  margin-top: 10px;\n  margin-bottom: 20px;\n\n  font-size: 16px;\n  font-weight: 400;\n  color: #fcfcfcb7;\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  MovieGalleryCard,\n  LinkWrapper,\n  MoviePoster,\n  Description,\n  MovieTitle,\n  MovieDateRelease,\n} from 'components/MoviesGallery/MovieGalleryItem/MovieGalleryItem.styled';\n\nexport default function MovieGalleryItem({ movie }) {\n  const location = useLocation();\n  let moviePosterSrc = require('services/no-poster.png');\n  if (movie.poster_path) {\n    moviePosterSrc = `https://image.tmdb.org/t/p/w500/${movie.poster_path}`;\n  }\n\n  return (\n    <>\n      <MovieGalleryCard>\n        <LinkWrapper to={`/movies/${movie.id}`} state={{ from: location }}>\n          <MoviePoster src={moviePosterSrc} alt={movie.title} width={270} />\n          <Description>\n            <MovieTitle>{movie.title}</MovieTitle>\n            <MovieDateRelease>\n              Release date: {new Date(movie.release_date).toLocaleDateString()}\n            </MovieDateRelease>\n          </Description>\n        </LinkWrapper>\n      </MovieGalleryCard>\n    </>\n  );\n}\n\nMovieGalleryItem.propTypes = {\n  movie: PropTypes.objectOf(\n    PropTypes.shape({\n      poster_path: PropTypes.string,\n      title: PropTypes.string,\n      release_date: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import PropTypes from 'prop-types';\n\nimport { MoviesGalleryContainer } from 'components/MoviesGallery/MoviesGalleryList/MoviesGalleryList.styled';\nimport MovieGalleryItem from 'components/MoviesGallery/MovieGalleryItem/MovieGalleryItem';\n\nexport default function MoviesGalleryList({ movies }) {\n  return (\n    <>\n      <MoviesGalleryContainer>\n        {movies.map(movie => (\n          <MovieGalleryItem key={movie.id} movie={movie} />\n        ))}\n      </MoviesGalleryContainer>\n    </>\n  );\n}\n\nMoviesGalleryList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n    })\n  ).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const MoviesGalleryWrapper = styled.div`\n  max-width: 1440px;\n  margin: 0 auto;\n\n  padding: 36px 15px;\n`;\n\nexport const Title = styled.h1`\n  margin-bottom: 36px;\n  font-size: 32px;\n`;\n","import PropTypes from 'prop-types';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'b0cf6b13af537de1f960eba55e00f400';\n\nasync function FetchTrendingMovies() {\n  const response = await axios.get(`trending/movie/week?api_key=${API_KEY}`);\n  return response;\n}\n\nasync function FetchQueryMovies(searchQuery) {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${searchQuery}&page=1`\n  );\n  return response;\n}\n\nasync function FetchMoviesDetails(movie_id) {\n  const response = await axios.get(`movie/${movie_id}?api_key=${API_KEY}`);\n  return response;\n}\n\nasync function GetMoviesGenresList() {\n  const response = await axios.get(`genre/movie/list?api_key=${API_KEY}`);\n  return response;\n}\n\nasync function GetMovieCast(movie_id) {\n  const response = await axios.get(\n    `movie/${movie_id}/credits?api_key=${API_KEY}`\n  );\n  return response;\n}\n\nasync function GetMovieReviews(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response;\n}\n\nexport {\n  FetchTrendingMovies,\n  FetchQueryMovies,\n  FetchMoviesDetails,\n  GetMoviesGenresList,\n  GetMovieCast,\n  GetMovieReviews,\n};\n\nGetMovieCast.propTypes = { movieId: PropTypes.number.isRequired };\nFetchMoviesDetails.propTypes = { movieId: PropTypes.number.isRequired };\nFetchQueryMovies.propTypes = { searchQuery: PropTypes.string.isRequired };\n","import { NotificationManager } from 'react-notifications';\n\nconst INFO_MESSAGE =\n  \"We're sorry, but you've reached the end of search results.\";\nconst EMPTY_QUERY_MESSAGE = 'Please enter your search query.';\nconst NO_FOUND_MESSAGE =\n  'Sorry, there are no movies matching your search query. Please try again.';\nconst NO_FOUND_REVIEWS = \"We don't have any reviews for this movie.\";\nconst ERROR_MESSAGE = 'API error:';\n\nfunction NotificationInfo(message) {\n  NotificationManager.info(message);\n}\nfunction NotificationWarning(message) {\n  NotificationManager.warning(message);\n}\nfunction NotificationError(message) {\n  NotificationManager.error(message);\n}\n\nexport {\n  INFO_MESSAGE,\n  EMPTY_QUERY_MESSAGE,\n  NO_FOUND_MESSAGE,\n  NO_FOUND_REVIEWS,\n  ERROR_MESSAGE,\n  NotificationInfo,\n  NotificationWarning,\n  NotificationError,\n};\n"],"names":["LoaderWrapper","styled","Loader","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","MoviesGalleryContainer","MovieGalleryCard","LinkWrapper","NavLink","MoviePoster","Description","MovieTitle","MovieDateRelease","MovieGalleryItem","movie","location","useLocation","moviePosterSrc","require","poster_path","to","id","state","from","src","alt","title","Date","release_date","toLocaleDateString","MoviesGalleryList","movies","map","MoviesGalleryWrapper","Title","axios","API_KEY","FetchTrendingMovies","response","FetchQueryMovies","searchQuery","FetchMoviesDetails","movie_id","GetMovieCast","GetMovieReviews","movieId","propTypes","PropTypes","EMPTY_QUERY_MESSAGE","NO_FOUND_MESSAGE","NO_FOUND_REVIEWS","ERROR_MESSAGE","NotificationWarning","message","NotificationManager","NotificationError"],"sourceRoot":""}