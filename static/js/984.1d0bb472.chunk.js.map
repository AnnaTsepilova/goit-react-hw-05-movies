{"version":3,"file":"static/js/984.1d0bb472.chunk.js","mappings":"sQAEaA,EAAoBC,EAAAA,GAAAA,KAAH,2D,mBCAjBC,EAAgBD,EAAAA,GAAAA,IAAH,wIASbE,EAAaF,EAAAA,GAAAA,KAAH,2OAaVG,EAAmBH,EAAAA,GAAAA,OAAH,2ZAoBhBI,EAAwBJ,EAAAA,GAAAA,KAAH,6MAYrBK,EAAkBL,EAAAA,GAAAA,MAAH,+f,mBCzCb,SAASM,EAAT,GAAqC,IAAbC,EAAY,EAAZA,SACrC,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KA6BA,OAVAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRC,EAAM,UAAGH,EAAaI,IAAI,iBAApB,QAAiC,GAC7CN,EAAeK,GACVN,GAILF,EAASQ,EACV,GAAE,CAACN,KAGF,SAACR,EAAD,WACE,UAACC,EAAD,CAAYK,SAxBK,SAAAU,GACnBA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,cACfC,EAAQF,EAAKV,YAAYa,MAAMC,cACnC,GAAqB,KAAjBF,EAAMG,OACR,OAAOC,EAAAA,GAA2BA,EAAAA,IAEpClB,EAASc,GACTX,EAAe,IACfS,EAAKO,OACN,EAcG,WACE,SAACrB,EAAD,CACEsB,KAAK,OACLC,KAAK,cACLC,aAAa,MACbC,YAAY,gBACZC,SAnCkB,SAAAd,GACxB,IAAIK,EAAQL,EAAMG,cAAcE,MAAMC,cACtCV,EAA0B,KAAVS,EAAe,CAAEP,OAAQO,GAAU,CAAC,EACrD,KAkCK,UAACnB,EAAD,CAAkBwB,KAAK,SAAvB,WACE,SAACvB,EAAD,sBACA,SAAC,MAAD,CACE4B,MAAO,CACLC,MAAO,QACPC,OAAQ,QACRC,KAAM,4BAOnB,C,kCCxDc,SAASC,IACtB,OAAsC5B,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAO6B,EAAP,KAAeC,EAAf,KACA,GAAkC9B,EAAAA,EAAAA,WAAS,GAA3C,eAAO+B,EAAP,KAAkBC,EAAlB,KA4BA,OAtBA1B,EAAAA,EAAAA,YAAU,WAAM,wCAId,oGAEI0B,GAAa,GAFjB,UAG2BC,EAAAA,EAAAA,IAAiBhC,GAH5C,OAGUiC,EAHV,OAIIJ,EAAUI,EAASC,KAAKC,SAEnBF,EAASC,KAAKC,QAAQC,QACzBpB,EAAAA,GAAyBA,EAAAA,IAP/B,gDAUIA,EAAAA,GAAA,UAA4BA,EAAAA,GAA5B,YAAoD,KAAMqB,UAV9D,yBAYIN,GAAa,GAZjB,6EAJc,sBACT/B,GADS,mCAmBdsC,EACD,GAAE,CAACtC,KAGF,UAACV,EAAD,YACE,SAAC,EAAAiD,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,OAEF,SAAC5C,EAAD,CAAcC,SA/BO,SAAA4C,GACvBzC,EAAeyC,EAChB,KA8BG,UAAC,IAAD,WACGd,IAAU,SAACe,EAAA,EAAD,CAAmBf,OAAQA,IACrCE,IAAa,SAACW,EAAA,EAAD,SAIrB,C","sources":["pages/Movies/Movies.styled.jsx","components/MoviesSearch/MoviesSearch.styled.jsx","components/MoviesSearch/MoviesSearch.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MoviesPageWrapper = styled.main`\n  min-height: calc(100vh - 64px);\n`;\n","import styled from 'styled-components';\n\nexport const SearchWrapper = styled.div`\n  height: 100%;\n\n  margin-left: auto;\n  margin-right: auto;\n  width: 1440px;\n  padding: 36px 15px 0 15px;\n`;\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #202025;\n  border-radius: 4px;\n  outline: none;\n  overflow: hidden;\n\n  border: 1px solid rgb(253, 81, 3);\n`;\n\nexport const SearchFormButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-size: 50%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.8;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  border-left: 1px solid rgb(253, 81, 3);\n  background-color: #202025;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormButtonLabel = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 18px;\n  border: none;\n  outline: none;\n  padding-left: 15px;\n  padding-right: 4px;\n\n  background-color: #202025;\n  color: #fcfcfc;\n\n  -webkit-text-fill-color: #fcfcfc;\n  -webkit-box-shadow: 0 0 0px 40rem #202025 inset;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n    color: rgba(255, 255, 255, 0.76);\n  }\n\n  &:textarea {\n    background-color: #202025;\n    color: #fcfcfc;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { ImSearch } from 'react-icons/im';\n\nimport {\n  SearchWrapper,\n  SearchForm,\n  SearchFormButton,\n  SearchFormButtonLabel,\n  SearchFormInput,\n} from 'components/MoviesSearch/MoviesSearch.styled';\n\nimport * as Notify from 'services/Notify';\n\nexport default function MoviesSearch({ onSubmit }) {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const handleSearchQuery = event => {\n    let value = event.currentTarget.value.toLowerCase();\n    setSearchParams(value !== '' ? { search: value } : {});\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    let query = form.searchQuery.value.toLowerCase();\n    if (query.trim() === '') {\n      return Notify.NotificationWarning(Notify.EMPTY_QUERY_MESSAGE);\n    }\n    onSubmit(query);\n    setSearchQuery('');\n    form.reset();\n  };\n\n  useEffect(() => {\n    const search = searchParams.get('search') ?? '';\n    setSearchQuery(search);\n    if (!searchQuery) {\n      return;\n    }\n\n    onSubmit(search);\n  }, [searchQuery]);\n\n  return (\n    <SearchWrapper>\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchFormInput\n          type=\"text\"\n          name=\"searchQuery\"\n          autocomplete=\"off\"\n          placeholder=\"Search movies\"\n          onChange={handleSearchQuery}\n        />\n        <SearchFormButton type=\"submit\">\n          <SearchFormButtonLabel>Search</SearchFormButtonLabel>\n          <ImSearch\n            style={{\n              width: '1.5em',\n              height: '1.5em',\n              fill: 'rgb(253, 81, 3)',\n            }}\n          />\n        </SearchFormButton>\n      </SearchForm>\n    </SearchWrapper>\n  );\n}\n\nMoviesSearch.propTypes = {\n  searchQuery: PropTypes.string,\n  onSubmit: PropTypes.func,\n};\n","import { useState, useEffect, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { Outlet } from 'react-router-dom';\n\nimport { MoviesGalleryWrapper } from 'pages/Home/Home.styled';\nimport { MoviesPageWrapper } from 'pages/Movies/Movies.styled';\n\nimport MoviesSearch from 'components/MoviesSearch/MoviesSearch';\nimport MoviesGalleryList from 'components/MoviesGallery/MoviesGalleryList/MoviesGalleryList';\nimport Loader from 'components/Loader/Loader';\nimport { FetchQueryMovies } from 'services/MoviesApi';\nimport * as Notify from 'services/Notify';\n\nexport default function Movies() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleFormSubmit = newSearchQuery => {\n    setSearchQuery(newSearchQuery);\n  };\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    async function fetchData() {\n      try {\n        setIsLoading(true);\n        const response = await FetchQueryMovies(searchQuery);\n        setMovies(response.data.results);\n\n        if (!response.data.results.length) {\n          Notify.NotificationError(Notify.NO_FOUND_MESSAGE);\n        }\n      } catch (error) {\n        Notify.NotificationError(`${Notify.ERROR_MESSAGE} ${error.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchData();\n  }, [searchQuery]);\n\n  return (\n    <MoviesPageWrapper>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n      <MoviesSearch onSubmit={handleFormSubmit} />\n      <MoviesGalleryWrapper>\n        {movies && <MoviesGalleryList movies={movies} />}\n        {isLoading && <Loader />}\n      </MoviesGalleryWrapper>\n    </MoviesPageWrapper>\n  );\n}\n\nMovies.propTypes = {\n  searchQuery: PropTypes.string,\n  page: PropTypes.number,\n};\n"],"names":["MoviesPageWrapper","styled","SearchWrapper","SearchForm","SearchFormButton","SearchFormButtonLabel","SearchFormInput","MoviesSearch","onSubmit","useState","searchQuery","setSearchQuery","useSearchParams","searchParams","setSearchParams","useEffect","search","get","event","preventDefault","form","currentTarget","query","value","toLowerCase","trim","Notify","reset","type","name","autocomplete","placeholder","onChange","style","width","height","fill","Movies","movies","setMovies","isLoading","setIsLoading","FetchQueryMovies","response","data","results","length","message","fetchData","Suspense","fallback","Loader","newSearchQuery","MoviesGalleryList"],"sourceRoot":""}