{"version":3,"file":"static/js/521.984ef996.chunk.js","mappings":"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","sources":["components/Cast/CastList/CastList.styled.jsx","components/Cast/CastItem/CastItem.styled.jsx","components/Cast/CastItem/CastItem.jsx","components/Cast/CastList/CastList.jsx","components/Cast/Cast.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","services/MoviesApi.jsx","services/Notify.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastListContainer = styled.ul`\n  display: grid;\n  margin-left: auto;\n  margin-right: auto;\n  padding-bottom: 36px;\n  max-width: 1440px;\n\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 30px;\n  margin-top: 0;\n  margin-bottom: 0;\n\n  list-style: none;\n`;\n","import styled from 'styled-components';\n\nexport const CastCard = styled.li`\n  margin-left: auto;\n  margin-right: auto;\n  width: 200px;\n\n  overflow: hidden;\n  outline: none;\n`;\n\nexport const PosterWrapper = styled.div`\n  display: block;\n  width: 150px;\n  height: auto;\n  object-fit: cover;\n`;\nexport const Poster = styled.img`\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n`;\n\nexport const Description = styled.div`\n  min-height: 100px;\n`;\n\nexport const CastName = styled.h3`\n  margin-top: 24px;\n  margin-bottom: 20px;\n  font-size: 18px;\n`;\n\nexport const Text = styled.p`\n  margin-bottom: 10px;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 1.25;\n  color: #fcfcfcb7;\n`;\n","import PropTypes from 'prop-types';\nimport {\n  CastCard,\n  PosterWrapper,\n  Poster,\n  Description,\n  CastName,\n  Text,\n} from 'components/Cast/CastItem/CastItem.styled';\n\nexport default function CastItem({ castInd }) {\n  let castPosterSrc = require('services/no-poster.png');\n  if (castInd.profile_path) {\n    castPosterSrc = `https://image.tmdb.org/t/p/w500/${castInd.profile_path}`;\n  }\n\n  return (\n    <CastCard>\n      <PosterWrapper>\n        <Poster src={castPosterSrc} alt={castInd.name} width={170} />\n      </PosterWrapper>\n      <Description>\n        <CastName>{castInd.name}</CastName>\n        <Text>Character: </Text>\n        <Text>{castInd.character}</Text>\n      </Description>\n    </CastCard>\n  );\n}\n\nCastItem.propTypes = {\n  castInd: PropTypes.objectOf(\n    PropTypes.shape({\n      profile_path: PropTypes.string,\n      name: PropTypes.string,\n      character: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import PropTypes from 'prop-types';\n\nimport { CastListContainer } from 'components/Cast/CastList/CastList.styled';\nimport CastItem from 'components/Cast/CastItem/CastItem';\n\nexport default function CastList({ cast }) {\n  return (\n    <CastListContainer>\n      {cast.map(castInd => (\n        <CastItem key={castInd.id} castInd={castInd} />\n      ))}\n    </CastListContainer>\n  );\n}\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n    })\n  ).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport * as Notify from 'services/Notify';\n\nimport { GetMovieCast } from 'services/MoviesApi';\nimport Loader from 'components/Loader/Loader';\nimport CastList from 'components/Cast/CastList/CastList';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    async function fetchData() {\n      try {\n        setIsLoading(true);\n        const response = await GetMovieCast(movieId);\n        setCast(response.data.cast);\n      } catch (error) {\n        Notify.NotificationError(`${Notify.ERROR_MESSAGE} ${error.message}`);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    fetchData();\n  }, [movieId]);\n\n  return <>{isLoading ? <Loader /> : <CastList cast={cast} />}</>;\n}\n\nCast.propTypes = {\n  movieId: PropTypes.number,\n  cast: PropTypes.object,\n};\n","import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 30px 0;\n`;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { LoaderWrapper } from 'components/Loader/Loader.styled';\n\nexport default function Loader() {\n  return (\n    <LoaderWrapper>\n      <ThreeDots\n        height=\"80\"\n        width=\"80\"\n        radius=\"9\"\n        color=\"#fd5103\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n    </LoaderWrapper>\n  );\n}\n","import PropTypes from 'prop-types';\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'b0cf6b13af537de1f960eba55e00f400';\n\nasync function FetchTrendingMovies() {\n  const response = await axios.get(`trending/movie/week?api_key=${API_KEY}`);\n  return response;\n}\n\nasync function FetchQueryMovies(searchQuery) {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${searchQuery}&page=1`\n  );\n  return response;\n}\n\nasync function FetchMoviesDetails(movie_id) {\n  const response = await axios.get(`movie/${movie_id}?api_key=${API_KEY}`);\n  return response;\n}\n\nasync function GetMoviesGenresList() {\n  const response = await axios.get(`genre/movie/list?api_key=${API_KEY}`);\n  return response;\n}\n\nasync function GetMovieCast(movie_id) {\n  const response = await axios.get(\n    `movie/${movie_id}/credits?api_key=${API_KEY}`\n  );\n  return response;\n}\n\nasync function GetMovieReviews(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response;\n}\n\nexport {\n  FetchTrendingMovies,\n  FetchQueryMovies,\n  FetchMoviesDetails,\n  GetMoviesGenresList,\n  GetMovieCast,\n  GetMovieReviews,\n};\n\nGetMovieCast.propTypes = { movieId: PropTypes.number.isRequired };\nFetchMoviesDetails.propTypes = { movieId: PropTypes.number.isRequired };\nFetchQueryMovies.propTypes = { searchQuery: PropTypes.string.isRequired };\n","import { NotificationManager } from 'react-notifications';\n\nconst INFO_MESSAGE =\n  \"We're sorry, but you've reached the end of search results.\";\nconst EMPTY_QUERY_MESSAGE = 'Please enter your search query.';\nconst NO_FOUND_MESSAGE =\n  'Sorry, there are no movies matching your search query. Please try again.';\nconst NO_FOUND_REVIEWS = \"We don't have any reviews for this movie.\";\nconst ERROR_MESSAGE = 'API error:';\n\nfunction NotificationInfo(message) {\n  NotificationManager.info(message);\n}\nfunction NotificationWarning(message) {\n  NotificationManager.warning(message);\n}\nfunction NotificationError(message) {\n  NotificationManager.error(message);\n}\n\nexport {\n  INFO_MESSAGE,\n  EMPTY_QUERY_MESSAGE,\n  NO_FOUND_MESSAGE,\n  NO_FOUND_REVIEWS,\n  ERROR_MESSAGE,\n  NotificationInfo,\n  NotificationWarning,\n  NotificationError,\n};\n"],"names":["CastListContainer","styled","CastCard","PosterWrapper","Poster","Description","CastName","Text","CastItem","castInd","castPosterSrc","require","profile_path","src","alt","name","width","character","CastList","cast","map","id","Cast","movieId","useParams","useState","isLoading","setIsLoading","setCast","useEffect","GetMovieCast","response","data","Notify","message","fetchData","Loader","LoaderWrapper","height","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","axios","API_KEY","FetchTrendingMovies","FetchQueryMovies","searchQuery","FetchMoviesDetails","movie_id","GetMovieReviews","propTypes","PropTypes","EMPTY_QUERY_MESSAGE","NO_FOUND_MESSAGE","NO_FOUND_REVIEWS","ERROR_MESSAGE","NotificationWarning","NotificationManager","NotificationError"],"sourceRoot":""}